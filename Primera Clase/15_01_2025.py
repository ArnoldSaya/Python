# -*- coding: utf-8 -*-
"""15/01/2025

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uFFSLpsc0fQQsMaw75dM_YViBR5BCQtq

##Sobrecarga
distintos metodos
"""

class Animal:
  def __init__(self):
    pass
  def hacer_sonido(self, sonido = None):
    if not sonido:
      print("Hace sonido")
    else:
      print(sonido)

animal = Animal()
animal.hacer_sonido()
animal.hacer_sonido("miau")

class Animal:
  def __init__(self):
    pass
  def hacer_sonido(self, sonido = None):
      print("Hace sonido")
class Vaca(Animal):
  def hacer_sonido(self):
    print("La vaca hace muu")
class Perro(Animal):
  def hacer_sonido(self):
    print("El perro ladra")
class Gato(Animal):
  def hacer_sonido(self):
    print("El gato maulla")

perro = Perro()
vaca = Vaca()
gato = Gato()
animal = Animal()

lista_animales =[perro, gato, vaca, animal, Gato()]
for ani in lista_animales:
  ani.hacer_sonido()
#animal = Animal()
#animal.hacer_sonido()
#animal.hacer_sonido("miau")

#crear una clase figura geometrica que tiene un metodo
#hallar area = imprimir("Se puede hallar el area de una figura geometrica") (recibe dos parametros b=none, a=none)
#crear una clase cuadrado tiene un metodo hallar area= (imprmimir el area del cuadrado(lado, altura=none))
#crear una clase rectangulo tiene el mismo metodo que imprime el area del rectangulo (base, altura)
#hacer una lista de instancias figuras geometricas y recorrer la lista mostrando las areas de esos objetos
class FiguraGeometrica:
  def hallar_area(self, b = None, a = None):
      print("Se puede hallar el area de una figura geometrica")

class Rectangulo(FiguraGeometrica):
  def __init__(self, base, altura):
    self.base = base
    self.altura = altura
  def hallar_area(self):
    print("El area del rectangulo es ",self.base*self.altura)

class Cuadrado(Rectangulo):
  #def __init__(self, lado):
  #  super().__init__(lado, lado)
  def __init__(self, lado):
    self.lado = lado
  def hallar_area(self):
    print("El area del cuadrado es ",self.lado**2)

lista = [FiguraGeometrica(), Cuadrado(5), Rectangulo(3, 4)]

fig = FiguraGeometrica()
cuadrado = Cuadrado(8)
rectangulo = Rectangulo(2, 8)
lista2 = [fig, cuadrado, rectangulo]

for fig in lista:
  fig.hallar_area()

print("hallando el area de la lista 2: ")
for fig in lista2:
  fig.hallar_area()

class vehiculo:
  def __init__(self, tarifa, placa):
    self.tarifa = tarifa
    self.placa = placa
  def __add__(self, otro):
    #if type(otro) == vehiculo:
    return self.tarifa + otro.tarifa
    #return self.tarifa + otro.tarifa
auto = vehiculo(10, 'placa1')
bus = vehiculo(20, 'placa2')
print(auto+bus)

class vector:
  def __init__(self, x, y):
    self.x = x
    self.y = y
  def __add__(self, otro):
    return self.x + otro.x, self.y + otro.y

vec1 = vector('a','v' )
vec2 = vector('a','b' )
print(vec1+vec2)

"""En una lista enlazada tiene 2 clases lista con head que apunta a nada y un nodo que tiene otro head a nulo"""

class Node:
  def __init__(self, dato):
    self.dato = dato
    self.next = None
class LinkedList:
  def __init__(self):
    self.head = None
  def insert(self, dato):
    nodo = Node(dato)
    if not self.head:         #Solo si la lista esta vacia
      self.head = nodo
    else:
      actual = self.head
      while (actual.next != None):  #actual.next != None, actual.next is not None, actual.next son iguales y hace que head exista
        actual = actual.next
      actual.next = nodo
  def insert_orden(self, dato):
    nodo = Node(dato)
    if self.head.dato < dato:
      nodo.next = self.head
      self.head = nodo
      return
    actual = self.head
    while (actual.next and actual.next.dato < dato):
      actual = actual.next
    nodo.next = actual.next
    actual.next = nodo

    def show(self):
      actual = self.head
      while(actual is not None):
        print(actual.dato)
        actual = actual.next

lista = LinkedList()
lista.insert(2)
lista.insert(6)
lista.insert(5)
lista.insert(2)
lista.insert(3)

lista.show()